name: Deployment

on:
  push:
    branches:
      - master
jobs:
  unit-testing:
    name: Unit testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [UploadScore,GetScore,CreateUser,AuthenticateUser,BetaRegistration]
    steps:
      - uses: actions/checkout@v3
      - name: Initialize Go Environment
        uses: actions/setup-go@v3
        with:
          go-version: '1.18.1'
      - name: Running unit tests
        working-directory: ${{strategy.matrix.package}}
        run: |
          go mod init testing_module
          go mod tidy
          go test ./... -coverprofile coverage.out -covermode count
          go tool cover -func coverage.out
      - name: Quality Check
        env:
            MINIMUM_COVERAGE: 5
        run: |
            echo "Quality Check: checking test coverage is above minimum ..."
            echo "Threshold             : $MINIMUM_COVERAGE %"
            totalCoverage=`go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
            echo "Current test coverage : $totalCoverage %"
            if (( $(echo "$totalCoverage $MINIMUM_COVERAGE" | awk '{print ($1 > $2)}') )); then
                echo "All checks passed"
                echo "OK"
            else
                echo "Current test coverage is below the minimum. Please add more unit tests or extend the scenarios."
                echo "Failed"
                exit 1
            fi  
  deploy-serverless:
    name: Deploy lambda function(s)
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '1.18.1'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: dorny/paths-filter@v2.2.1
        id: filter
        with:
          filters: .github/filters.yml
      - uses: blombard/lambda-monorepo@master
        with:
          lambda-functions: '${{ toJson(steps.filter.outputs) }}'
          zip-params: 'main'
      